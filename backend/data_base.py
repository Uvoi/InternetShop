from sqlalchemy import create_engine, Column, Integer, String, ForeignKey, Float, DateTime, func, SmallInteger, Date, ARRAY, Numeric, Boolean, and_
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, sessionmaker, joinedload
from datetime import datetime


Base = declarative_base()


### üìç –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–∏–∑–¥–µ–ª–∏–π)
class Product(Base):
    __tablename__ = "products"

    productid = Column(Integer, primary_key=True)
    name = Column(String(100), nullable=False)
    description = Column(String)
    price = Column(Integer, nullable=False)

    # –ü–æ–ª –∏–∑–¥–µ–ª–∏—è (–º—É–∂—Å–∫–æ–µ / –∂–µ–Ω—Å–∫–æ–µ)
    gender = Column(String(10), nullable=False)  # "male" / "female"

    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—Ñ—É—Ç–±–æ–ª–∫–∞", "–±—Ä—é–∫–∏")
    category = Column(String(20))

    # –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    imglink = Column(String(255))

    # –°–æ—Å—Ç–∞–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "100% —Ö–ª–æ–ø–æ–∫", "–ü–æ–ª–∏—ç—Å—Ç–µ—Ä 50%, —Ö–ª–æ–ø–æ–∫ 50%")
    composition = Column(String(255), nullable=True)

    # –°–≤—è–∑—å —Å —Ç—Ä–µ–±—É–µ–º—ã–º–∏ –º–µ—Ä–∫–∞–º–∏
    required_measurements = relationship("ProductMeasurements", back_populates="product")


### üìç –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–µ–±—É–µ–º—ã—Ö –º–µ—Ä–æ–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
class ProductMeasurements(Base):
    __tablename__ = "product_measurements"

    id = Column(Integer, primary_key=True)
    product_id = Column(Integer, ForeignKey("products.productid"))

    # –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–≤–∞—Ä ("chest", "waist", "hips" –∏ —Ç. –¥.)
    measurement_name = Column(String(50))  
    required = Column(Boolean, default=True)  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –ª–∏ –º–µ—Ä–∫–∞

    product = relationship("Product", back_populates="required_measurements")

### üìç –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
class OrderItems(Base):
    __tablename__ = "order_items"

    id = Column(Integer, primary_key=True)
    order_id = Column(Integer, ForeignKey("orders.orderid"))
    product_id = Column(Integer, ForeignKey("products.productid"))

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    quantity = Column(Integer, nullable=False, default=1)

    # –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ (–Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∏)
    unit_price = Column(Numeric(10, 2), nullable=False)

    # –°–≤—è–∑—å —Å –∑–∞–∫–∞–∑–æ–º –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–º
    order = relationship("Orders", back_populates="order_items")
    product = relationship("Product")

### üìç –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø—Ä–∏ –∑–∞–∫–∞–∑–µ
class OrderMeasurements(Base):
    __tablename__ = "order_measurements"

    id = Column(Integer, primary_key=True)
    order_id = Column(Integer, ForeignKey("orders.orderid"))

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–µ—Ä–∫–∏ (–æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö)
    chest = Column(Integer, nullable=True)  # –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏
    waist = Column(Integer, nullable=True)  # –û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏
    hips = Column(Integer, nullable=True)  # –û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä
    shoulder_width = Column(Integer, nullable=True)  # –®–∏—Ä–∏–Ω–∞ –ø–ª–µ—á

    # –ú—É–∂—Å–∫–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ä–∫–∏
    chest_width = Column(Integer, nullable=True)  # –®–∏—Ä–∏–Ω–∞ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏
    seat_height = Column(Integer, nullable=True)  # –î–ª–∏–Ω–∞ —Å–∏–¥–µ–Ω–∏—è

    # –ñ–µ–Ω—Å–∫–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ä–∫–∏
    underbust_circumference = Column(Integer, nullable=True)  # –û–±—Ö–≤–∞—Ç –ø–æ–¥ –≥—Ä—É–¥—å—é
    bust_height = Column(Integer, nullable=True)  # –í—ã—Å–æ—Ç–∞ –≥—Ä—É–¥–∏
    skirt_length = Column(Integer, nullable=True)  # –î–ª–∏–Ω–∞ —é–±–∫–∏ –æ—Ç —Ç–∞–ª–∏–∏

    # –î–ª–∏–Ω–∞ —Ä—É–∫, –Ω–æ–≥ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ)
    arm_length = Column(Integer, nullable=True)  # –î–ª–∏–Ω–∞ —Ä—É–∫–∏
    wrist_circumference = Column(Integer, nullable=True)  # –û–±—Ö–≤–∞—Ç –∑–∞–ø—è—Å—Ç—å—è
    inseam_length = Column(Integer, nullable=True)  # –®–∞–≥–æ–≤–∞—è –¥–ª–∏–Ω–∞

    # –°–≤—è–∑—å —Å –∑–∞–∫–∞–∑–æ–º
    order = relationship("Orders", back_populates="measurements")


class Comments(Base):
    __tablename__ = 'comments'
    commentsid = Column(Integer, primary_key=True)
    productid = Column(Integer)
    customerid = Column(Integer, ForeignKey('customers.customerid'))
    text = Column(String())
    date = Column(DateTime, default=func.current_timestamp())
    customer = relationship("Customer", backref="comments")

class Basket(Base):
    __tablename__ = 'basket'
    customerid = Column(
        Integer,
        ForeignKey('customers.customerid', ondelete='CASCADE'),
        primary_key=True
    )
    productids = Column(ARRAY(Integer), nullable=False)
    customer = relationship("Customer", back_populates="baskets")

class Orders(Base):
    __tablename__ = "orders"
    
    orderid = Column(Integer, primary_key=True, index=True)
    customerid = Column(Integer, ForeignKey("customers.customerid"), index=True)

    # –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ (—Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ OrderItems)
    totalprice = Column(Numeric(10, 2), nullable=False)

    # –î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    orderdate = Column(Date, nullable=False)

    # –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    deliveryaddress = Column(String, nullable=False)

    # –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    deliverydate = Column(Date, nullable=False)

    # –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ("–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ", "–≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ", "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
    status = Column(String, nullable=False, default="pending")

    # –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã ("–Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ", "–æ–ø–ª–∞—á–µ–Ω–æ", "–≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ")
    payment_status = Column(String, nullable=False, default="not_paid")

    # –°–≤—è–∑—å —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º
    customer = relationship("Customer", back_populates="orders")

    # –°–≤—è–∑—å —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∑–∞–∫–∞–∑–µ (–º–Ω–æ–≥–∏–µ –∫–æ –º–Ω–æ–≥–∏–º)
    order_items = relationship("OrderItems", back_populates="order", cascade="all, delete-orphan")

    # –°–≤—è–∑—å —Å –º–µ—Ä–∫–∞–º–∏ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    measurements = relationship("OrderMeasurements", back_populates="order", uselist=False)


### üìç –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π)
class Customer(Base):
    __tablename__ = "customers"

    customerid = Column(Integer, primary_key=True)
    firstname = Column(String(50))
    lastname = Column(String(50))
    email = Column(String(100), unique=True, nullable=False)
    address = Column(String(255), nullable=True)
    password = Column(String(), nullable=False)
    photo = Column(String(255), nullable=True)
    admin = Column(Boolean, default=False)

    # –°–≤—è–∑—å —Å –∫–æ—Ä–∑–∏–Ω–æ–π (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–≤—è–∑—å)
    baskets = relationship("Basket", back_populates="customer", passive_deletes=True)

    # –°–≤—è–∑—å —Å –∑–∞–∫–∞–∑–∞–º–∏ (—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞)
    orders = relationship("Orders", back_populates="customer")


SQLALCHEMY_DATABASE_URL = "postgresql://postgres:0@localhost/clothes_shop"
engine = create_engine(SQLALCHEMY_DATABASE_URL)

Base.metadata.create_all(bind=engine)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


# def printCustomers():
#     with SessionLocal() as session:
#         customers = session.query(Customer).all()
#         print("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑—á–∏–∫–æ–≤:")
#         for customer in customers:
#             print(f"ID: {customer.customerid}, –ò–º—è: {customer.firstname}, –§–∞–º–∏–ª–∏—è: {customer.lastname}, –≠–ª. –ø–æ—á—Ç–∞: {customer.email}")

def add_product(name: str, description: str, price: float, gender: str, category: str, imglink: str, composition: str):
    with SessionLocal() as session:
        with session.begin():  # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            new_product = Product(
                name=name,
                description=description,
                price=price,
                gender=gender,
                category=category,
                imglink=imglink,
                composition = composition
            )
            session.add(new_product)
            session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        session.refresh(new_product)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞
    return new_product

def add_required_measurements(product_id: int, measurement_names: list):
    with SessionLocal() as session:
        with session.begin():
            for measurement in measurement_names:
                required_measurement = ProductMeasurements(
                    product_id=product_id,
                    measurement_name=measurement
                )
                session.add(required_measurement)


### üìç –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
def update_product(product_id: int, name: str = None, description: str = None, 
                   price: float = None, gender: str = None, category: str = None, imglink: str = None):
    with SessionLocal() as session:
        with session.begin():
            product = session.query(Product).filter(Product.productid == product_id).first()
            if not product:
                return None  # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if name:
                product.name = name
            if description:
                product.description = description
            if price:
                product.price = price
            if gender:
                product.gender = gender
            if category:
                product.category = category
            if imglink:
                product.imglink = imglink

        session.refresh(product)  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞
    return product

### üìç –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
def delete_product(product_id: int):
    with SessionLocal() as session:
        with session.begin():
            product = session.query(Product).filter(Product.productid == product_id).first()
            if not product:
                return None  # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

            session.delete(product)
    return product_id

def addNewComment(prodID, userID, text):
    with SessionLocal() as session:
        with session.begin():
            new_comment = Comments(
                productid=prodID,
                customerid=userID,
                text=text
            )
            session.add(new_comment)
            session.commit()

def addNewCustomer(firstname, lastname, email, password):
    with SessionLocal() as session:
        with session.begin(): 
            new_customer = Customer(
                firstname=firstname,
                lastname=lastname,
                email=email,
                password=password
            )
            session.add(new_customer)
            session.commit()
            return True




SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
db = SessionLocal()


def getAllProducts():
    all_products = []
    with SessionLocal() as session:
        products = session.query(Product).all()
        for product in products:
            product_dict = {
                "id": product.productid,
                "name": product.name,
                "description": product.description,
                "price": product.price,
                "category": product.category,
                "gender": product.gender,  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –∏–∑–¥–µ–ª–∏—è
                "imgLink": product.imglink,
                "required_measurements": [rm.measurement_name for rm in product.required_measurements]
            }
            all_products.append(product_dict)
    return all_products

def getProductByID(product_id):
    with SessionLocal() as session:
        product = session.query(Product).filter(Product.productid == product_id).first()
        if product:
            product_dict = {
                "id": product.productid,
                "name": product.name,
                "description": product.description,
                "price": product.price,
                "category": product.category,
                "gender": product.gender,  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –∏–∑–¥–µ–ª–∏—è
                "imgLink": product.imglink,
                "required_measurements": [rm.measurement_name for rm in product.required_measurements]
            }
            return product_dict
        return None



async def getCustomerByEmail(email):
    with SessionLocal() as session:
        customer = session.query(Customer).filter(Customer.email == email).first()
        if customer:
            customer_dict = {
                "id": customer.customerid,
                "firstname": customer.firstname,
                "lastname": customer.lastname,
                "email": customer.email,
                "address": customer.address,
                "password": customer.password,
            }
            customer_dict = {k: (v if v is not None else '') for k, v in customer_dict.items()}
            return customer_dict
        else:
            return None



def format_datetime(date_str):
    dt = datetime.fromisoformat(date_str)
    formatted_date = dt.strftime('%d.%m.%Y %H:%M')
    return formatted_date


def getCommentsByProdID(product_id):
    allComments = []
    with SessionLocal() as session:
        comments = session.query(Comments).options(joinedload(Comments.customer)).filter(Comments.productid == product_id)
        
        for comment in comments:
            if comment.customer:
                customer_name = f"{comment.customer.firstname} {comment.customer.lastname}"
                customer_photo = comment.customer.photo
                customer_id = comment.customer.customerid
                comments_dict = {
                    "id": comment.commentsid,
                    "prodId": comment.productid,
                    "customerid": customer_id,
                    "customerName": customer_name,
                    "customerPhoto": customer_photo,
                    "text": comment.text,
                    "date": format_datetime(str(comment.date))
                }
                allComments.append(comments_dict)
        return allComments


def add_products_to_basket(customer_id: int, product_ids: list[int]):
    with SessionLocal() as session:
        basket = session.query(Basket).filter(Basket.customerid == customer_id).first()
        
        if basket:
            updated_productids = basket.productids.copy()
            updated_productids.extend(product_ids)
            basket.productids = updated_productids
        else:
            basket = Basket(customerid=customer_id, productids=product_ids)
            session.add(basket)
        
        session.commit()



def get_products_from_basket(customer_id):
    with SessionLocal() as session:
        basket = session.query(Basket).filter(Basket.customerid == customer_id).first()
        if basket:
            return basket.productids
        else:
            return []

def delete_products_from_basket(customer_id: int, product_ids: list[int]):
    with SessionLocal() as session:
        basket = session.query(Basket).filter(Basket.customerid == customer_id).first()
        if basket:
            try:
                product_ids_to_remove = product_ids.copy()
                updated_productids = []
                
                for pid in basket.productids:
                    if pid in product_ids_to_remove:
                        product_ids_to_remove.remove(pid)
                    else:
                        updated_productids.append(pid)
                basket.productids = updated_productids
                session.commit()
            except Exception as e:
                session.rollback()
                print(f"Error deleting products from basket: {e}")
                raise
        else:
            raise ValueError("Basket not found for the given customer_id")


def delete_basket(customer_id: int):
    with SessionLocal() as session:
        basket = session.query(Basket).filter(Basket.customerid == customer_id).first()
        if basket:
            try:
                session.delete(basket)
                session.commit()
            except Exception as e:
                session.rollback()
                print(f"Error deleting basket: {e}")
                raise
        else:
            raise ValueError("Basket not found for the given customer_id")

def change_user_name(customer_id: int, new_name: dict):
    with SessionLocal() as session:
        customer = session.query(Customer).filter(Customer.customerid == customer_id).first()
        if customer:
            try:
                customer.firstname = new_name.firstName
                customer.lastname = new_name.lastName
                session.commit()
            except Exception as e:
                session.rollback()
                print(f"Error changing user name: {e}")
                raise
        else:
            raise ValueError("Customer not found for the given customer_id")

def change_user_address(customer_id: int, new_address: dict):
    with SessionLocal() as session:
        customer = session.query(Customer).filter(Customer.customerid == customer_id).first()
        if customer:
            try:
                customer.address = new_address.address
                session.commit()
            except Exception as e:
                session.rollback()
                print(f"Error changing user address: {e}")
                raise
        else:
            raise ValueError("Customer not found for the given customer_id")
        
def change_user_photo(customer_id: int, new_photo: dict):
    with SessionLocal() as session:
        customer = session.query(Customer).filter(Customer.customerid == customer_id).first()
        if customer:
            try:
                customer.photo = new_photo.photo
                session.commit()
            except Exception as e:
                session.rollback()
                print(f"Error changing user photo: {e}")
                raise
        else:
            raise ValueError("Customer not found for the given customer_id")


def get_user_orders(customer_id: int, admin: bool):
    with SessionLocal() as session:
        query = session.query(
            Orders.orderid,
            Orders.totalprice,
            Orders.orderdate,
            Orders.deliveryaddress,
            Orders.deliverydate,
            Orders.status
        ).filter(Orders.customerid == customer_id)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, —Å–∫—Ä—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "Deleted" –∏–ª–∏ "Error"
        if not admin:
            query = query.filter(Orders.status.notin_(['Deleted', 'Error']))

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã
        orders = query.options(joinedload(Orders.order_items)).all()

        orders_list = []
        for order in orders:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ OrderItems
            product_ids = [item.product_id for item in order.order_items]

            orders_list.append({
                'orderid': order.orderid,
                'productids': product_ids,  # –¢–µ–ø–µ—Ä—å —Å–ø–∏—Å–æ–∫ ID —Ç–æ–≤–∞—Ä–æ–≤ –±–µ—Ä–µ—Ç—Å—è –∏–∑ OrderItems
                'totalprice': float(order.totalprice),  # –ü—Ä–∏–≤–æ–¥–∏–º Decimal –∫ float
                'orderdate': datetime.fromisoformat(str(order.orderdate)).strftime('%d.%m.%Y'),
                'deliveryaddress': order.deliveryaddress,
                'deliverydate': datetime.fromisoformat(str(order.deliverydate)).strftime('%d.%m.%Y'),
                'status': order.status
            })

        return orders_list



def add_order(customerid: int, product_data: list[dict], deliveryaddress: str, orderdate: datetime, deliverydate: datetime, status: str):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    
    :param customerid: ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
    :param product_data: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å `product_id` –∏ `quantity`).
    :param deliveryaddress: –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.
    :param orderdate: –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞.
    :param deliverydate: –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.
    :param status: –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.
    """
    with SessionLocal() as session:
        with session.begin():
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
            new_order = Orders(
                customerid=customerid,
                totalprice=0,  # –ü–æ—Å—á–∏—Ç–∞–µ–º –ø–æ–∑–∂–µ
                orderdate=orderdate,
                deliveryaddress=deliveryaddress,
                deliverydate=deliverydate,
                status=status
            )
            session.add(new_order)
            session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –¥–æ –∫–æ–º–º–∏—Ç–∞

            total_price = 0  # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
            required_measurements = {}  # –•—Ä–∞–Ω–∏–º –º–µ—Ä–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
            for product_entry in product_data:
                product_id = product_entry["product_id"]
                quantity = product_entry["quantity"]

                product = session.query(Product).filter(Product.productid == product_id).first()
                if not product:
                    raise ValueError(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ OrderItems
                order_item = OrderItems(
                    order_id=new_order.orderid,
                    product_id=product_id,
                    quantity=quantity,
                    unit_price=product.price
                )
                session.add(order_item)

                # –°—á–∏—Ç–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
                total_price += product.price * quantity

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –º–µ—Ä–∫–∏ –Ω—É–∂–Ω—ã
                for measurement in product.required_measurements:
                    required_measurements[measurement.measurement_name] = None  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ

            # –û–±–Ω–æ–≤–ª—è–µ–º totalprice –∑–∞–∫–∞–∑–∞
            new_order.totalprice = total_price
            session.flush()

            # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–æ–≤ –µ—Å—Ç—å –º–µ—Ä–∫–∏, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å OrderMeasurements
            if required_measurements:
                order_measurements = OrderMeasurements(
                    order_id=new_order.orderid,
                    **required_measurements  # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–µ –º–µ—Ä–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                )
                session.add(order_measurements)

        session.refresh(new_order)
        return new_order

    
def get_user_photo(UserID):
    with SessionLocal() as session:
        customer = session.query(Customer).filter(Customer.customerid == UserID).first()
        if customer:
            return customer.photo
        else:
            return None

def set_status_order(orderID: int, status: str):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.

    :param orderID: ID –∑–∞–∫–∞–∑–∞.
    :param status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.
    :return: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞.
    """
    valid_statuses = ["pending", "processing", "shipped", "delivered", "canceled", "returned"]
    
    if status not in valid_statuses:
        raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: {valid_statuses}")

    with SessionLocal() as session:
        with session.begin():  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            order = session.query(Orders).filter(Orders.orderid == orderID).first()

            if not order:
                raise ValueError(f"–ó–∞–∫–∞–∑ —Å ID {orderID} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            order.status = status
            session.flush()

        session.refresh(order)
        return order

        
def is_user_admin(customer_id: int):
    with SessionLocal() as session:
        user = session.query(Customer.admin).filter(Customer.customerid == customer_id).first()
        if user:
            return user.admin
        else:
            raise ValueError("Customer not found for the given customer_id")
        
def get_all_users(start: int, count: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

    :param start: –°–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–Ω–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∫–∏).
    :param count: –°–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—É—á–∏—Ç—å.
    :return: –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø–∏—Å–µ–π.
    """
    with SessionLocal() as session:
        with session.begin():  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            total_count = session.query(Customer).count()
            users = (
                session.query(Customer)
                .order_by(Customer.customerid)  # –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                .offset(start)
                .limit(count)
                .all()
            )

        users_data = [
            {
                "customerid": user.customerid,
                "firstname": user.firstname,
                "lastname": user.lastname,
                "email": user.email,
                "photo": user.photo,
                "is_admin": bool(user.admin),  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ bool, –µ—Å–ª–∏ –≤ –ë–î –º–æ–≥—É—Ç –±—ã—Ç—å 0/1
            }
            for user in users
        ]

        return {"users": users_data, "total_count": total_count}


def get_all_orders(start: int, count: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

    :param start: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.
    :param count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å.
    :return: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤.
    """
    with SessionLocal() as session:
        with session.begin():  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            total_count = session.query(Orders).count()

            orders = (
                session.query(Orders)
                .order_by(Orders.orderdate.desc())  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
                .offset(start)
                .limit(count)
                .options(joinedload(Orders.order_items))  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                .all()
            )

        orders_data = []
        for order in orders:
            product_ids = [item.product_id for item in order.order_items]  # –°–æ–±–∏—Ä–∞–µ–º ID —Ç–æ–≤–∞—Ä–æ–≤

            order_data = {
                'orderid': order.orderid,
                'customerid': order.customerid,
                'productids': product_ids,  # –¢–µ–ø–µ—Ä—å –±–µ—Ä–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ OrderItems
                'totalprice': float(order.totalprice),  # –ü—Ä–∏–≤–æ–¥–∏–º Decimal –∫ float
                'orderdate': datetime.fromisoformat(str(order.orderdate)).strftime('%d.%m.%Y'),
                'deliveryaddress': order.deliveryaddress,
                'deliverydate': datetime.fromisoformat(str(order.deliverydate)).strftime('%d.%m.%Y'),
                'status': order.status
            }
            orders_data.append(order_data)

        return {"orders": orders_data, "total_count": total_count}

    


def get_stats():
    with SessionLocal() as session:
        total_earnings = session.query(func.sum(Orders.totalprice)).filter(Orders.status != 'Error').scalar()
        products_in_transit = session.query(func.sum(func.array_length(Orders.productids, 1))) \
                                     .filter(Orders.status == 'In Transit') \
                                     .scalar()
        delivered_products = session.query(func.sum(func.array_length(Orders.productids, 1))) \
                                    .filter(Orders.status.in_(['Completed', 'Deleted'])) \
                                    .scalar()
        total_users = session.query(func.count(Customer.customerid)).scalar()

        total_orders = session.query(func.count(Orders.orderid)).scalar()
        return {
            "total_earnings": total_earnings or 0,
            "products_in_transit": products_in_transit or 0,
            "delivered_products": delivered_products or 0,
            "total_users": total_users or 0,
            "total_orders": total_orders or 0,
        }
    
def delete_product_by_id(product_id: int):
    """
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    :param product_id: ID –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.
    :return: ID —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.
    """
    with SessionLocal() as session:
        with session.begin():  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            product = session.query(Product).filter(Product.productid == product_id).first()
            if not product:
                raise ValueError(f"–ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Ä–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            session.query(ProductMeasurements).filter(ProductMeasurements.product_id == product_id).delete()

            # –£–¥–∞–ª—è–µ–º —Å–∞–º –ø—Ä–æ–¥—É–∫—Ç
            session.delete(product)

        return product_id  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞



def update_order_status_on_login(customer_id: int):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ 'Completed', –µ—Å–ª–∏ —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ —É–∂–µ –ø—Ä–æ—à–µ–ª.

    :param customer_id: ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
    :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.
    """
    with SessionLocal() as session:
        with session.begin():  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            current_date = datetime.now().date()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –æ–¥–Ω–∏–º SQL-–∑–∞–ø—Ä–æ—Å–æ–º
            updated_orders = (
                session.query(Orders)
                .filter(
                    and_(
                        Orders.customerid == customer_id,
                        Orders.deliverydate <= current_date,
                        Orders.status == 'In Transit'
                    )
                )
                .update({Orders.status: 'Completed'}, synchronize_session="fetch")
            )

        return updated_orders  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤

def get_customer_by_id(id: int, admin: bool):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID.

    :param id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param admin: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–∏–π –∞–¥–º–∏–Ω–æ–º.
    :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    with SessionLocal() as session:
        with session.begin():  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            customer = session.get(Customer, id)  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è PK
            
            if not customer:
                return None

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
            customer_dict = {
                "firstname": customer.firstname,
                "lastname": customer.lastname,
                "photo": customer.photo,
                "is_admin": customer.admin  # –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–µ–º, –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è UI
            }

            if admin:
                customer_dict.update({
                    "email": customer.email,
                    "address": customer.address,
                })

            return customer_dict



def delete_user_by_id(id: int):
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID.

    :param id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω, –∏–Ω–∞—á–µ False.
    """
    with SessionLocal() as session:
        with session.begin():  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            user = session.get(Customer, id)  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ PRIMARY KEY
            if not user:
                return False  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–∫–æ—Ä–∑–∏–Ω–∞, –º–µ—Ä–∫–∏ –∏ —Ç.–¥.)
            session.query(Basket).filter(Basket.customerid == id).delete()
            session.query(Measurements).filter(Measurements.customer_id == id).delete()

            session.delete(user)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        return True  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
